#! /usr/bin/env python
# -*- python -*-

from __future__ import print_function
import os
import sys
import argparse

try:
    import ROOT
except ImportError:
    print('Error importing ROOT. Exiting...')
    sys.exit(1)

def main():

    parser = argparse.ArgumentParser(description='')

    ## paths
    parser.add_argument('filepath1', nargs='?')
    parser.add_argument('filepath2', nargs='?')

    parser.add_argument('-t', '--tree', help='Compare trees with this name')

    args = parser.parse_args()

    file_path_1, file_path_2 = args.filepath1, args.filepath2

    if file_path_1 is None or file_path_2 is None:
        parser.print_usage()
        return 1

    # file 1
    if not os.path.isfile(file_path_1):
        print('%s is not a file' % file_path_1)
        return 1

    try:
        fin1 = ROOT.TFile.Open(file_path_1)

        if fin1.IsZombie():
            print('Error opening rootfile')
            fin1.Close()
            return 1
    except ReferenceError:
        return 1

    # file 2
    if not os.path.isfile(file_path_2):
        print('%s is not a file' % file_path_2)
        return 1

    try:
        fin2 = ROOT.TFile.Open(file_path_2)

        if fin2.IsZombie():
            print('Error opening rootfile')
            fin2.Close()
            return 1
    except ReferenceError:
        return 1


    # compare content
    keys1 = [ key for key in fin1.GetListOfKeys() ]
    keys2 = [ key for key in fin2.GetListOfKeys() ]

    names1 = [ key.GetName() for key in keys1 ]
    names2 = [ key.GetName() for key in keys2 ]

    if names1 != names2:
        print('Different key content!')


    if args.tree is None:
        return

    if not (args.tree in names1 and args.tree in names2):
        print('Tree %s not available in on of the input files' % args.tree)
        return

    tree1 = fin1.Get(args.tree)
    tree2 = fin2.Get(args.tree)

    branches1 = [ branch.GetName() for branch in tree1.GetListOfLeaves() ]
    branches2 = [ branch.GetName() for branch in tree2.GetListOfLeaves() ]

    if tree1.GetEntries() != tree2.GetEntries():
        print('Different number of entries in mini ntuples')

    for var in branches1:

        if not var in branches2:
            print('Variable ' + var + ' not in file2')
            continue

        hname_1 = '%s_1' % var
        exp1 = '%s>>%s' % (var, hname_1)

        hname_2 = '%s_2' % var
        exp2 = '%s>>%s' % (var, hname_2)

        tree1.Draw(exp1, '', 'goff')
        h1 = ROOT.gDirectory.Get(hname_1)

        tree2.Draw(exp2, '', 'goff')
        h2 = ROOT.gDirectory.Get(hname_2)

        # compare histograms
        entries_1 = h1.GetEntries()
        entries_2 = h2.GetEntries()

        mean_1 = h1.GetMean()
        mean_2 = h2.GetMean()

        rms_1 = h1.GetRMS()
        rms_2 = h2.GetRMS()

        if (entries_1 != entries_2) or (mean_1 != mean_2) or (rms_1 != rms_2):
            print('Difference in %s (Entries, Mean, RMS): (%i, %.2f, %.2f) != (%i, %.2f, %.2f)' % (var, entries_1, mean_1, rms_1, entries_2, mean_2, rms_2))


    for var in branches2:

        if not var in branches1:
            print('Variable ' + var + ' not in file1')
        else:
            continue

if __name__ == '__main__':
    main()
