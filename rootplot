#! /usr/bin/env python
# -*- python -*-

from __future__ import print_function
import os
import sys
import argparse

try:
    import ROOT
except ImportError:
    print('Error importing ROOT. Exiting...')
    sys.exit(1)

ROOT.PyConfig.IgnoreCommandLineOptions = True
ROOT.gROOT.SetBatch(True)

from rootutils.rootutils import *

# colors
green  = '\033[92m'
red    = '\033[91m'
blue   = '\033[94m'
purple = '\033[95m'
endc   = '\033[0m'

def print_value(mean, error):
    print('%.2f +- %.2f' % (mean, error))

def get_screen_size():
    return os.popen('stty size', 'r').read().split()



def main():

    parser = argparse.ArgumentParser(description='')

    ## paths
    parser.add_argument('objpath', nargs='+')
    #parser.add_argument('rootpath', nargs='?')

    ## options
    parser.add_argument('-o', '--output', help='Output name')

    parser.add_argument('--logx', action='store_true', help='Set log scale in x axis')
    parser.add_argument('--logy', action='store_true', help='Set log scale in y axis')
    parser.add_argument('--logz', action='store_true', help='Set log scale in z axis')

    parser.add_argument('-s', '--selection', help='Selection')

    args = parser.parse_args()

    if len(args.objpath) < 1:
        args.print_usage()
        return 1

    # check/get objects
    objects = []
    for path in args.objpath:

        file_path, root_path = path.split('/', 1)
        print(file_path, root_path)
        # check root file
        if not os.path.isfile(file_path):
            print('%s is not a file' % file_path)
            return 1

        try:
            fin = ROOT.TFile.Open(file_path)

            if fin.IsZombie():
                print('error opening rootfile')
                fin.Close()
                return 1
        except:
            return 1

        keys = fin.GetListOfKeys()

        if root_path not in [ key.GetName() for key in keys ] and '/' not in root_path:
            print('object %s does not exist' % root_path)
            fin.Close()
            return 1

        s_root_path = root_path.split('/')

        obj = fin.Get(s_root_path[0])

        if obj.InheritsFrom('TH1') or obj.InheritsFrom('TGraph'):
            objects.append(obj)

        # tree
        elif obj.InheritsFrom('TTree'):

            if len(s_root_path) < 2:
                pass #print('branch %s does not exist in tree %s' % ())
            else:

                obj.Draw(s_root_path[1]+'>>htmp', '', 'goff')

                hist = ROOT.gDirectory.Get('htmp')
                hist.SetDirectory(0)
                ROOT.SetOwnership(hist, False)
                objects.append(hist)


        fin.Close()


    if not objects:
        print('no obects to plot')
        return 1


    # plot
    set_default_style()

    canvas = ROOT.TCanvas()

    # for obj in objects:
    #     set_hist_style(obj, color='blue')


    if args.logx:
        canvas.SetLogy()
    if args.logy:
        canvas.SetLogy()
    if args.logz:
        canvas.SetLogz()

    obj1 = objects[0]
    set_hist_style(obj1, color='blue')
    obj1.Draw()
    for obj in objects[1:]:
        set_hist_style(obj, color='red')
        obj.Draw('same')

    outname = args.output if args.output is not None else 'test.pdf'
    canvas.SaveAs(outname)

    return 0


if __name__ == '__main__':
    main()
